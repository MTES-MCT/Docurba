# Generated by Django 5.1.5 on 2025-04-10 18:52

import django.db.models.deletion
import django.db.models.functions.datetime
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CommuneProcedure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "db_table": "procedures_perimetres",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("type", models.TextField(blank=True, null=True)),
                (
                    "date_evenement_string",
                    models.CharField(db_column="date_iso", null=True),
                ),
                ("is_valid", models.BooleanField(db_default=True)),
            ],
            options={
                "db_table": "doc_frise_events",
                "ordering": ("-date_evenement_string",),
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Procedure",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "type_document",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CC", "Cc"),
                            ("SCOT", "Scot"),
                            ("SD", "Sd"),
                            ("PLU", "Plu"),
                            ("POS", "Pos"),
                            ("PLUi", "Plui"),
                            ("PLUiH", "Pluih"),
                            ("PLUiHM", "Pluihm"),
                            ("PLUiM", "Pluim"),
                        ],
                        db_column="doc_type",
                        null=True,
                    ),
                ),
                ("name", models.TextField(blank=True, null=True)),
                ("type", models.CharField(blank=True, null=True)),
                ("numero", models.CharField(blank=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now()
                    ),
                ),
                ("soft_delete", models.BooleanField(db_default=False)),
                (
                    "archived",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Q(
                            ("doublon_cache_de__isnull", False),
                            ("soft_delete", True),
                            _connector="OR",
                        ),
                        output_field=models.BooleanField(),
                    ),
                ),
            ],
            options={
                "db_table": "procedures",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Departement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code_insee", models.CharField(unique=True)),
                ("nom", models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code_insee", models.CharField(unique=True)),
                ("nom", models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name="Collectivite",
            fields=[
                ("id", models.CharField(primary_key=True, serialize=False)),
                ("code_insee", models.CharField(null=True, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("COM", "Commune"),
                            ("COMD", "Commune déléguée"),
                            ("COMA", "Commune associée"),
                            ("CC", "Communauté de communes"),
                            ("SMF", "Syndicat Mixte Fermé"),
                            ("SMO", "Syndicat Mixte Ouvert"),
                            ("METRO", "Métropole"),
                            ("CU", "Communauté Urbaine"),
                            ("PETR", "Pôle d'Équilibre Territorial et Rural"),
                            ("MET69", "Métropole de Lyon"),
                            ("SIVU", "Syndicat Intercommunal à Vocation Unique"),
                            ("EPT", "Établissement Public Territorial"),
                            ("CA", "Communauté d'Agglomération"),
                            ("POLEM", "Pôle Métropolitain"),
                            ("SIVOM", "Syndicat Intercommunal à Vocation Multiple"),
                        ]
                    ),
                ),
                ("intitule", models.CharField()),
                ("competence_plan", models.BooleanField()),
                ("competence_schema", models.BooleanField()),
                (
                    "groupements",
                    models.ManyToManyField(
                        related_name="membres", to="core.collectivite"
                    ),
                ),
                (
                    "departement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="collectivites",
                        to="core.departement",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="departement",
            name="region",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.RESTRICT,
                related_name="departements",
                to="core.region",
            ),
        ),
        migrations.CreateModel(
            name="Commune",
            fields=[
                (
                    "collectivite_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.collectivite",
                    ),
                ),
                (
                    "intercommunalite",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="communes",
                        to="core.collectivite",
                    ),
                ),
                (
                    "nouvelle",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="deleguee",
                        to="core.commune",
                    ),
                ),
                (
                    "procedures",
                    models.ManyToManyField(
                        related_name="perimetre",
                        through="core.CommuneProcedure",
                        to="core.procedure",
                    ),
                ),
            ],
            bases=("core.collectivite",),
        ),
    ]
